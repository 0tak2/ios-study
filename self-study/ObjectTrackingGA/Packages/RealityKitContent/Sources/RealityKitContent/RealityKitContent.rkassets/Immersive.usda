#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["Sphere_Left", "Sphere_Right", "GridMaterial", "Timeline"]
    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "Transform" (
        active = true
    )
    {
        float3 xformOp:translate = (0, 0.12130137, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Anchoring"
        {
            uniform token info:id = "RealityKit.Anchoring"

            def RealityKitStruct "descriptor"
            {
                token type = "Object"
                asset url = @pocarisweat.referenceobject@
            }
        }

        def RealityKitComponent "VFXEmitter"
        {
            uniform token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Constant"
                token birthLocation = "Surface"
                float3 emissionDirection = (0.5, 1, 0)
                double emissionDuration = 0.2
                double emissionDurationVariation = 0.1
                token emitterShape = "Point"
                double idleDuration = 0.4
                double idleDurationVariation = 0.3
                bool isLocal = 0
                bool isSpawningEnabled = 1
                bool loops = 1
                float particleSpeed = 1
                float particleSpeedVariation = 0.4
                float3 shapeSize = (1, 1, 1)
                bool spawnInheritParentColor = 0
                token spawnOccasion = "OnBirth"
                float spawnSpreadFactor = 0
                float spawnSpreadFactorVariation = 0
                float spawnVelocityFactor = 0.5
                double warmupDuration = 0

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, -3, 0)
                    token billboardMode = "Billboard"
                    float birthRate = 1200
                    float birthRateVariation = 1000
                    token blendMode = "Additive"
                    float colorEvolutionPower = 0.2
                    float dampingFactor = 0
                    float4 endColorA = (0.9986965, 0.9674097, 0, 1)
                    float4 endColorB = (1, 1, 1, 1)
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0
                    float noiseScale = 1
                    float noiseStrength = 0
                    token opacityOverLife = "GradualFadeInOut"
                    float particleAngle = 0
                    float particleAngleVariation = 0
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/flare.exr@
                    double particleLifeSpan = 0.4
                    double particleLifeSpanVariation = 0.22
                    float particleMass = 1
                    float particleMassVariation = 0.1
                    float particleSize = 0.03
                    float particleSizeVariation = 0.003
                    float3 radialGravityCenter = (1, 1, 0)
                    float radialGravityStrength = 0
                    float sizeMultiplierAtEndOfLifespan = 0.1
                    float sizeMultiplierAtEndOfLifespanPower = 0.001
                    token sortOrder = "IncreasingDepth"
                    float spreadingAngle = 0.2
                    float4 startColorA = (1, 1, 1, 1)
                    float4 startColorB = (1, 1, 1, 1)
                    float stretchFactor = 12
                    bool useEndColor = 1
                    bool useEndColorRange = 1
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                    float3 acceleration = (0, -2, 0)
                    token billboardMode = "Billboard"
                    float birthRate = 400
                    float birthRateVariation = 0
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    float dampingFactor = 0
                    float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                    float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0
                    float noiseScale = 0.4
                    float noiseStrength = 3
                    token opacityOverLife = "Constant"
                    float particleAngle = 0
                    float particleAngleVariation = 0
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/flare.exr@
                    double particleLifeSpan = 0.25
                    double particleLifeSpanVariation = 0
                    float particleMass = 1
                    float particleMassVariation = 0
                    float particleSize = 0.001
                    float particleSizeVariation = 0.001
                    float3 radialGravityCenter = (0, 0, 0)
                    float radialGravityStrength = 0
                    float sizeMultiplierAtEndOfLifespan = 1.3
                    float sizeMultiplierAtEndOfLifespanPower = 0
                    token sortOrder = "IncreasingID"
                    float spreadingAngle = 0
                    float4 startColorA = (1, 1, 1, 1)
                    float4 startColorB = (1, 1, 1, 1)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }
            }
        }
    }

    def "Toy_Rocket_1" (
        active = true
        prepend references = @RocketToy1.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.3, 0.3, 0.3)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RealityKitTimeline "Timeline"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 2.001591182255245
                uniform token info:id = "610DE728-4964-480B-A158-2E1E41D5B61E"
                float3 position = (0, 0.4, 0)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (0.3, 0.3, 0.3)
                double startTime = 0
                rel target = </Root/Toy_Rocket_1>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/Cylinder/DefaultMaterial>
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.7, 0.7, 0.7)
        float3 xformOp:translate = (0, 0.06947009, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/Cylinder/DefaultMaterial/OcclusionSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "OcclusionSurface"
            {
                uniform token info:id = "ND_realitykit_occlusion_surfaceshader"
                token outputs:out
                float2 ui:nodegraph:node:pos = (-246.9375, 73.05859)
                int ui:nodegraph:node:stackingOrder = 11
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Cylinder/OnTap>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnTap"
        {
            rel actions = </Root/Cylinder/OnTap/Action>
            uniform bool exclusive
            rel triggers = </Root/Cylinder/OnTap/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Cylinder>
                token info:id = "TapGesture"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Timeline>
                rel animationLibraryKeyOverrideKey = </Root/Cylinder/OnTap/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }
}

