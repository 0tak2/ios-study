#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["GridMaterial", "Terrarium_3D_0702", "Sphere", "Bowl_Glass", "DirectionalLight", "PointLight", "SpotLight", "SpatialGrassAudio", "Atmospheres_Grasslands", "Fog_Particle"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Terrarium_3D_0702" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @Terrarium_3D_0702.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (0.35, 0.35, 0.35)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }

        over "Bowl"
        {
            over "Sphere_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Bowl_Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "_materials"
        {
            over "Plant_leaf"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "Principled_BSDF"
                {
                    float inputs:opacityThreshold = 0.001
                }
            }
        }
    }

    def Sphere "Sphere" (
        active = false
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Collider", "InputTarget", "GridMaterial"]
        rel material:binding = </Root/GridMaterial/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.1
                token shapeType = "Sphere"
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }

    def Material "Bowl_Glass"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/Bowl_Glass/UsdPreviewSurface.outputs:surface>

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.9757168, 0.96397835, 0.9471743) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:ior = 2
            float inputs:opacity = 0.3
            float inputs:roughness = 0
            token outputs:surface
        }
    }

    def Xform "DirectionalLight" (
        customData = {
            float3 rotationEulerHint = (-1.3962622, -1.7453288, -0.69813216)
        }
    )
    {
        quatf xformOp:orient = (-0.29429665, 0.588964, 0.41011986, 0.6311201)
        float3 xformOp:translate = (0.5006577, 0.61833084, -0.0024560615)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            float3 color = (1, 0.90209234, 0.70831114)
            token info:id = "RealityKit.DirectionalLight"
            float intensity = 7000

            def RealityKitStruct "Shadow"
            {
                bool isEnabled = 1
            }
        }
    }

    def Xform "PointLight"
    {
        float3 xformOp:translate = (0, 0, 0.24246882)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "PointLight"
        {
            float3 color = (0.98938805, 0.5399838, 1)
            token info:id = "RealityKit.PointLight"
            float intensity = 800
        }
    }

    def Xform "SpotLight" (
        customData = {
            float3 rotationEulerHint = (0.20331702, 1.4816551, 0.66990674)
        }
    )
    {
        quatf xformOp:orient = (0.7158184, -0.14998665, 0.6587177, 0.17663258)
        float3 xformOp:scale = (1.625914, 1.625914, 1.625914)
        float3 xformOp:translate = (0.25186408, -0.06986073, 0.05983071)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "SpotLight"
        {
            token info:id = "RealityKit.SpotLight"
            float intensity = 800

            def RealityKitStruct "Shadow"
            {
            }
        }
    }

    def Xform "SpatialGrassAudio" (
        customData = {
            float3 rotationEulerHint = (0, 3.1415927, 0)
        }
    )
    {
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "SpatialAudio"
        {
            uniform token info:id = "RealityKit.SpatialAudio"
        }
    }

    def "Atmospheres_Grasslands" (
        active = true
        references = @AtmospheresGrasslands.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Fog_Particle" (
        active = true
        references = @Fog_Particle.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

